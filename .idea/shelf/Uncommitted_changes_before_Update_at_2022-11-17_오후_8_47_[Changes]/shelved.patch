Index: app/src/main/java/com/lx/project5/AssessFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.lx.project5\r\n\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.fragment.app.Fragment\r\nimport com.bumptech.glide.Glide\r\nimport com.lx.api.BasicClient\r\nimport com.lx.data.ReviewListResponse\r\nimport com.lx.project5.AppData.Companion.reviewSaveData\r\nimport com.lx.project5.WriteSaveData.Companion.savecareNo\r\nimport com.lx.project5.databinding.FragmentAssessBinding\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\n\r\nclass AssessFragment : Fragment() {\r\n    var _binding: FragmentAssessBinding? = null\r\n    val binding get() = _binding!!\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        _binding = FragmentAssessBinding.inflate(inflater, container, false)\r\n        setView()\r\n\r\n\r\n        binding.completeButton4.setOnClickListener {\r\n            (activity as MainActivity).onFragmentChanged(MainActivity.ScreenItem.ITEMcomplete)\r\n        }\r\n\r\n        binding.button2.setOnClickListener {\r\n            reviewSave()\r\n            reviewAdd()\r\n        }\r\n\r\n        return binding.root\r\n    }\r\n\r\n    fun reviewAdd() {\r\n\r\n        BasicClient.api.memberReview(\r\n            requestCode = \"1001\",\r\n            memberNo = AppData.loginData?.memberNo.toString(),\r\n            careNo = reviewSaveData?.saveCareNo.toString(),\r\n            reviewTitle = binding.reviewTitle.text.toString(),\r\n            reviewContent = binding.reviewContent.text.toString(),\r\n            star = reviewSaveData?.saveStar.toString()\r\n\r\n        ).enqueue(object : Callback<ReviewListResponse> {\r\n            override fun onResponse(call: Call<ReviewListResponse>, response: Response<ReviewListResponse>) {\r\n                (activity as MainActivity).showToast(\"1\")\r\n\r\n\r\n            }\r\n            override fun onFailure(call: Call<ReviewListResponse>, t: Throwable) {\r\n                (activity as MainActivity).showToast(\"2\")\r\n\r\n            }\r\n\r\n        })\r\n\r\n    }\r\n\r\n    fun reviewSave(){\r\n        reviewSaveData?.saveReviewTitle = binding.reviewTitle.text.toString()\r\n        reviewSaveData?.saveReviewContent = binding.reviewContent.text.toString()\r\n        reviewSaveData?.saveStar = binding.rtb.toString()\r\n        (activity as MainActivity).onFragmentChanged(MainActivity.ScreenItem.ITEMcomplete)\r\n    }\r\n\r\n    fun setView(){\r\n        AppData?.memberdata.apply{\r\n            this?.memberImage?.let {\r\n                val uri = Uri.parse(\"http://192.168.0.3:8001${memberImage}\")\r\n                Glide.with(binding.personProfile).load(uri).into(binding.personProfile)\r\n            }\r\n            binding.personName.setText(AppData.loginData?.memberName)\r\n\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/lx/project5/AssessFragment.kt b/app/src/main/java/com/lx/project5/AssessFragment.kt
--- a/app/src/main/java/com/lx/project5/AssessFragment.kt	(revision 39fb8470da6618bb31223409483a83a12a8925e5)
+++ b/app/src/main/java/com/lx/project5/AssessFragment.kt	(date 1668685498565)
@@ -73,7 +73,7 @@
     fun setView(){
         AppData?.memberdata.apply{
             this?.memberImage?.let {
-                val uri = Uri.parse("http://192.168.0.3:8001${memberImage}")
+                val uri = Uri.parse("http://192.168.0.15:8001${memberImage}")
                 Glide.with(binding.personProfile).load(uri).into(binding.personProfile)
             }
             binding.personName.setText(AppData.loginData?.memberName)
Index: app/src/main/java/com/lx/api/BasicApi.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.lx.api\r\n\r\nimport android.util.Log\r\nimport com.lx.data.*\r\nimport okhttp3.Interceptor\r\nimport okhttp3.MultipartBody\r\nimport okhttp3.OkHttpClient\r\nimport okhttp3.logging.HttpLoggingInterceptor\r\nimport retrofit2.Call\r\nimport retrofit2.Retrofit\r\nimport retrofit2.converter.gson.GsonConverterFactory\r\nimport retrofit2.http.*\r\nimport java.lang.Exception\r\nimport java.security.SecureRandom\r\nimport java.security.cert.CertificateException\r\nimport java.security.cert.X509Certificate\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport java.util.concurrent.TimeUnit\r\nimport javax.net.ssl.*\r\nimport kotlin.collections.HashMap\r\n\r\n/**\r\n * 웹서버 요청/응답을 처리하기 위한 기본 API\r\n */\r\ninterface BasicApi {\r\n\r\n    /**\r\n     * POST 방식으로 멤버 로그인 요청 / 사용가능\r\n     */\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"care/memberLogin\")\r\n    fun postMemberLogin(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"memberId\") memberId: String,\r\n        @Field(\"memberPw\") memberPw: String\r\n    ): Call<MemberListResponse>\r\n\r\n    /**\r\n     * POST 방식으로 멤버 회원가입 요청 / 사용가능\r\n     */\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"care/memberAdd\")\r\n    fun postMemberAdd(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"memberId\") memberId: String,\r\n        @Field(\"memberName\") memberName: String,\r\n        @Field(\"memberPw\") memberPw: String,\r\n        @Field(\"memberAddress\") memberAddress: String,\r\n        @Field(\"memberImage\") memberImage: String\r\n    ): Call<MemberListResponse>\r\n\r\n    /**\r\n     * POST 방식으로 멤버 비밀번호찾기 요청\r\n     */\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"care/memberFindPw\")\r\n    fun postMemberFindPw(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"memberMobile\") memberMobile: String,\r\n        @Field(\"memberName\") memberName: String\r\n    ): Call<MemberListResponse>\r\n\r\n    /**\r\n     * POST 방식으로 아이디 중복체크 요청\r\n     */\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"care/memberIdOverlap\")\r\n    fun postMemberCheckId(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"memberId\") memberId: String\r\n    ): Call<MemberListResponse>\r\n\r\n    /**\r\n     * POST 방식으로 멤버 정보수정 요청\r\n     */\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"care/memberUpdate\")\r\n    fun postMemberUpdate(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"memberNo\") memberNo: String,\r\n        @Field(\"memberAddress\") memberAddress: String,\r\n        @Field(\"memberImage\") memberImage: String,\r\n        @Field(\"memberName\") memberName: String\r\n    ): Call<MemberListResponse>\r\n\r\n    /**\r\n     * GET 방식으로 주변 펫시터 요청 / 사용가능\r\n     */\r\n\r\n    @GET(\"care/memberDelete\")\r\n    fun getCareList(\r\n        @Query(\"requestCode\") requestCode: String,\r\n        @Query(\"carex1\") carex1: Int,\r\n        @Query(\"carex2\") carex2: Int,\r\n        @Query(\"carey1\") carey1: Int,\r\n        @Query(\"carey2\") carey2: Int\r\n    ): Call<CareListResponse>\r\n\r\n    /**\r\n     * GET 방식으로 주변 펫시터 요청 테스트@@ / 사용가능\r\n     */\r\n\r\n    @GET(\"/care/listTest\")\r\n    fun getCareListTest(\r\n        @Query(\"requestCode\") requestCode: String\r\n    ): Call<CareListResponse>\r\n\r\n\r\n\r\n    /**\r\n     * GET 방식으로  개리스트 요청\r\n     */\r\n\r\n    @GET(\"care/petList\")\r\n    fun getPetFilter(\r\n        @Query(\"requestCode\") requestCode: String,\r\n        @Query(\"memberNo\") memberNo: String\r\n    ): Call<DogListResponse>\r\n\r\n    /**\r\n     * GET 방식으로 개목록 요청\r\n     */\r\n    @FormUrlEncoded\r\n    @POST(\"care/petAdd\")\r\n    fun petAdd(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"memberNo\") memberNo: String,\r\n        @Field(\"dogName\") dogName: String,\r\n        @Field(\"dogGender\") dogGender: String,\r\n        @Field(\"dogAge\") dogAge: String,\r\n        @Field(\"dogCharacter\") dogCharacter: String,\r\n        @Field(\"dogImage\") dogImage: String,\r\n        @Field(\"dogEducation\") dogEducation: String,\r\n        @Field(\"dogBreed\") dogBreed: String\r\n        ): Call<DogListResponse>\r\n\r\n    /**\r\n     * POST 방식으로 시부레  개좀 맡아달라고\r\n     */\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"care/acrAdd\")\r\n    fun acrAdd(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"memberNo\") memberNo: String,\r\n        @Field(\"careNo\") careNo: String,\r\n        @Field(\"dogNo\") dogNo: String,\r\n        @Field(\"startTime\") startTime: String,\r\n        @Field(\"endTime\") endTime: String,\r\n        @Field(\"assignTitle\") assignTitle: String,\r\n        @Field(\"assignContent\") assignContent: String\r\n    ): Call<AcrListResponse>\r\n\r\n    /**\r\n     * GET 방식으로  선택요청 할일 추가\r\n     */\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"care/lastInsert\")\r\n    fun lastInsert(\r\n        @Field(\"requestCode\") requestCode: String\r\n    ): Call<LastInsertResponse>\r\n\r\n    /**\r\n     * GET 방식으로  선택요청 할일 추가\r\n     */\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"care/awrTodoAdd\")\r\n    fun awrTodoAdd(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"awrn\") awrn: String,\r\n        @Field(\"todoNo\") todoNo: Int\r\n    ): Call<AwrTodoResponse>\r\n    /**\r\n     * GET 방식으로  선택요청 할일 추가\r\n     */\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"care/acrTodoAdd\")\r\n    fun acrTodoAdd(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"acrn\") acrn: String,\r\n        @Field(\"todoNo\") todoNo: Int\r\n    ): Call<AcrTodoResponse>\r\n\r\n\r\n    /**\r\n     * POST 방식으로 돌봄 주변신청 보내기\r\n     */\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"care/awrAdd\")\r\n    fun awrAdd(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"assignContent\") assignContent: String,\r\n        @Field(\"memberNo\") memberNo: String,\r\n        @Field(\"startTime\") startTime: String,\r\n        @Field(\"endTime\") endTime: String,\r\n        @Field(\"assignTitle\") assignTitle: String,\r\n        @Field(\"writeTime\") writeTime: String,\r\n        @Field(\"lat\") lat: String,\r\n        @Field(\"lng\") lng: String,\r\n        @Field(\"dogNo\") dogNo: String\r\n    ): Call<AwrListResponse>\r\n\r\n    // 맡김이가 쓴 글 리스트트\r\n   @GET(\"care/awrList\")\r\n    fun getawrFilter(\r\n        @Query(\"requestCode\") requestCode: String,\r\n        @Query(\"memberNo\") memberNo: String\r\n    ): Call<AwrListResponse>\r\n\r\n    /**\r\n     * POST 방식으로 맡기미 리뷰작성 보내기\r\n     */\r\n\r\n    @FormUrlEncoded\r\n    @POST(\"care/memberReview\")\r\n    fun memberReview(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"memberNo\") memberNo: String,\r\n        @Field(\"careNo\") careNo: String,\r\n        @Field(\"star\") star: String,\r\n        @Field(\"reviewTitle\") reviewTitle: String,\r\n        @Field(\"reviewContent\") reviewContent: String\r\n    ): Call<ReviewListResponse>\r\n\r\n    /**\r\n     * GET 선택신청 개 정보\r\n     */\r\n    @GET(\"care/dogInfo\")\r\n    fun getDogInfo(\r\n        @Query(\"requestCode\") requestCode: String,\r\n        @Query(\"dogNo\") dogNo: String,\r\n    ): Call<DogListResponse>\r\n\r\n    /**\r\n     * POST 방식으로 개수정 보내기\r\n     */\r\n    @FormUrlEncoded\r\n    @POST(\"care/dogUpdate\")\r\n    fun postDogUpdate(\r\n        @Field(\"requestCode\") requestCode: String,\r\n        @Field(\"dogAge\") dogAge: String,\r\n        @Field(\"dogCharacter\") dogCharacter: String,\r\n        @Field(\"dogEducation\") dogEducation: String,\r\n        @Field(\"dogBreed\") dogBreed: String,\r\n        @Field(\"dogGender\") dogGender: String,\r\n        @Field(\"dogImage\") dogImage: String,\r\n        @Field(\"dogName\") dogName: String,\r\n        @Field(\"dogNo\") dogNo: String,\r\n        @Field(\"memberNo\") memberNo: String\r\n    ): Call<DogListResponse>\r\n\r\n\r\n    /**\r\n     * 파일 업로드 요청 / 사용하자\r\n     */\r\n\r\n    @Multipart\r\n    @POST(\"/care/upload\")\r\n    fun uploadFile(\r\n        @Part file: MultipartBody.Part,\r\n        @Part(value=\"params\", encoding=\"UTF-8\") params: HashMap<String,String> = hashMapOf()\r\n    ): Call<FileUploadResponse>\r\n\r\n\r\n\r\n}\r\n\r\nclass BasicClient {\r\n\r\n    companion object {\r\n        const val TAG = \"BasicClient\"\r\n\r\n        private var instance : BasicApi? = null\r\n\r\n        val api: BasicApi\r\n            get() {\r\n                return getInstance()\r\n            }\r\n\r\n        @Synchronized\r\n        fun getInstance(): BasicApi {\r\n            if (instance == null)\r\n                instance = create()\r\n            return instance as BasicApi\r\n        }\r\n\r\n        // 프로토콜\r\n        private const val PROTOCOL = \"http\"\r\n\r\n        // 기본 URL\r\n        private const val BASE_URL = \"http://192.168.0.3:8001/\"\r\n\r\n        // 헤더 속성\r\n        private const val CLIENT_ID = \"\"\r\n        private const val CLIENT_SECRET = \"\"\r\n        var userId:String = \"\"\r\n\r\n        fun create(): BasicApi {\r\n            val httpLoggingInterceptor = HttpLoggingInterceptor()\r\n            httpLoggingInterceptor.level = HttpLoggingInterceptor.Level.BODY\r\n\r\n            val headerInterceptor = Interceptor {\r\n                val request = it.request()\r\n                    .newBuilder()\r\n                    .addHeader(\"X-Client-Id\", CLIENT_ID)\r\n                    .addHeader(\"X-Client-Secret\", CLIENT_SECRET)\r\n                    .addHeader(\"X-Client-UserId\", userId)\r\n                    .build()\r\n                return@Interceptor it.proceed(request)\r\n            }\r\n\r\n            val clientBuilder = OkHttpClient.Builder()\r\n\r\n            if (PROTOCOL == \"https\") {\r\n\r\n                val x509TrustManager: X509TrustManager = object : X509TrustManager {\r\n                    override fun getAcceptedIssuers(): Array<X509Certificate> {\r\n                        val x509Certificates = arrayOf<X509Certificate>()\r\n                        return x509Certificates\r\n                    }\r\n\r\n                    @Throws(CertificateException::class)\r\n                    override fun checkServerTrusted(chain: Array<X509Certificate>, authType: String) {\r\n                        Log.d(TAG, \": authType: $authType\")\r\n                    }\r\n\r\n                    @Throws(CertificateException::class)\r\n                    override fun checkClientTrusted(chain: Array<X509Certificate>, authType: String) {\r\n                        Log.d(TAG, \": authType: $authType\")\r\n                    }\r\n                }\r\n\r\n                try {\r\n                    val sslContext = SSLContext.getInstance(\"TLS\")\r\n                    sslContext.init(null, trustAllCerts, SecureRandom())\r\n                    val sslSocketFactory = sslContext.socketFactory\r\n                    clientBuilder.sslSocketFactory(sslSocketFactory, x509TrustManager)\r\n                } catch (e: Exception) {\r\n                    e.printStackTrace()\r\n                }\r\n\r\n                clientBuilder.hostnameVerifier(RelaxedHostNameVerifier())\r\n\r\n            }\r\n\r\n            clientBuilder.addInterceptor(headerInterceptor)\r\n            clientBuilder.addInterceptor(httpLoggingInterceptor)\r\n            clientBuilder.callTimeout(60, TimeUnit.SECONDS)       // 호출 타임아웃 시간 설정 60초\r\n            clientBuilder.connectTimeout(60, TimeUnit.SECONDS)    // 연결 타임아웃 시간 설정 60초\r\n            clientBuilder.readTimeout(60, TimeUnit.SECONDS)\r\n            clientBuilder.writeTimeout(60, TimeUnit.SECONDS)\r\n\r\n            val client = clientBuilder.build()\r\n\r\n            return Retrofit.Builder()\r\n                .baseUrl(BASE_URL)\r\n                .client(client)\r\n                .addConverterFactory(GsonConverterFactory.create())\r\n                .build()\r\n                .create(BasicApi::class.java)\r\n        }\r\n\r\n        private val trustAllCerts = arrayOf<TrustManager>(object : X509TrustManager {\r\n            override fun getAcceptedIssuers(): Array<X509Certificate> {\r\n                return arrayOf()\r\n            }\r\n\r\n            @Throws(CertificateException::class)\r\n            override fun checkClientTrusted(chain: Array<X509Certificate>, authType: String) {}\r\n\r\n            @Throws(CertificateException::class)\r\n            override fun checkServerTrusted(chain: Array<X509Certificate>, authType: String) {}\r\n        })\r\n\r\n        class RelaxedHostNameVerifier : HostnameVerifier {\r\n            override fun verify(hostname: String, session: SSLSession): Boolean {\r\n                return true\r\n            }\r\n        }\r\n\r\n        private var format = SimpleDateFormat(\"yyyyMMddHHmmssSSS\", Locale.KOREAN)\r\n        private var seqCode = 0\r\n\r\n\r\n        /**\r\n         * 요청 코드 생성\r\n         */\r\n        @Synchronized\r\n        fun generateRequestCode(): String {\r\n            seqCode += 1\r\n            if (seqCode > 999) {\r\n                seqCode = 1\r\n            }\r\n\r\n            var seqCodeStr = seqCode.toString()\r\n            if (seqCodeStr.length == 1) {\r\n                seqCodeStr = \"00$seqCodeStr\"\r\n            } else if (seqCodeStr.length == 2) {\r\n                seqCodeStr = \"0$seqCodeStr\"\r\n            }\r\n\r\n            val date = Date()\r\n            val dateStr = format.format(date)\r\n\r\n            return dateStr + seqCodeStr\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/lx/api/BasicApi.kt b/app/src/main/java/com/lx/api/BasicApi.kt
--- a/app/src/main/java/com/lx/api/BasicApi.kt	(revision 39fb8470da6618bb31223409483a83a12a8925e5)
+++ b/app/src/main/java/com/lx/api/BasicApi.kt	(date 1668685498547)
@@ -298,7 +298,7 @@
         private const val PROTOCOL = "http"
 
         // 기본 URL
-        private const val BASE_URL = "http://192.168.0.3:8001/"
+        private const val BASE_URL = "http://192.168.0.15:8001/"
 
         // 헤더 속성
         private const val CLIENT_ID = ""
Index: app/src/main/java/com/lx/project5/CareInfoFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.lx.project5\r\n\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.bumptech.glide.Glide\r\nimport com.lx.api.BasicClient\r\nimport com.lx.data.ReviewListResponse\r\nimport com.lx.project5.databinding.FragmentCareInfoBinding\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\nclass CareInfoFragment : Fragment() {\r\n    var _binding: FragmentCareInfoBinding? = null\r\n    val binding get() = _binding!!\r\n    var reviewAdapter: ReviewAdapter? = null\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        _binding = FragmentCareInfoBinding.inflate(inflater, container, false)\r\n        initList()\r\n        reviewView()\r\n\r\n        binding.backButton12.setOnClickListener {\r\n            (activity as MainActivity).onFragmentChanged(MainActivity.ScreenItem.ITEM1)\r\n        }\r\n        binding.button10.setOnClickListener {\r\n            (activity as MainActivity).onFragmentChanged(MainActivity.ScreenItem.ITEM1)\r\n\r\n        }\r\n\r\n        return binding.root\r\n    }\r\n\r\n    // 리스트 초기화\r\n    fun initList() {\r\n        val layoutManager = LinearLayoutManager(context)\r\n        binding.reviewList.layoutManager = layoutManager\r\n\r\n        reviewAdapter = ReviewAdapter()\r\n        binding.reviewList.adapter = reviewAdapter\r\n\r\n    }\r\n\r\n    fun reviewView() {\r\n        AppData.careData?.apply{\r\n            this.careImage.let{\r\n                val uri = Uri.parse(\"http://192.168.0.3:8001${careImage}\")\r\n                Glide.with(binding.imageView2).load(uri).into(binding.imageView2)\r\n            }\r\n            binding.textView7.text = \"${AppData.careData?.careName}\"\r\n            binding.textView8.text = \"${AppData.careData?.careId}\"\r\n            binding.textView9.text = \"${AppData.careData?.careAddress}\"\r\n\r\n        }\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/lx/project5/CareInfoFragment.kt b/app/src/main/java/com/lx/project5/CareInfoFragment.kt
--- a/app/src/main/java/com/lx/project5/CareInfoFragment.kt	(revision 39fb8470da6618bb31223409483a83a12a8925e5)
+++ b/app/src/main/java/com/lx/project5/CareInfoFragment.kt	(date 1668685498515)
@@ -50,7 +50,7 @@
     fun reviewView() {
         AppData.careData?.apply{
             this.careImage.let{
-                val uri = Uri.parse("http://192.168.0.3:8001${careImage}")
+                val uri = Uri.parse("http://192.168.0.15:8001${careImage}")
                 Glide.with(binding.imageView2).load(uri).into(binding.imageView2)
             }
             binding.textView7.text = "${AppData.careData?.careName}"
Index: app/src/main/java/com/lx/project5/ReviewAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.lx.project5\r\n\r\nimport android.content.Context\r\nimport android.net.Uri\r\nimport android.view.LayoutInflater\r\nimport android.view.ViewGroup\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.bumptech.glide.Glide\r\nimport com.lx.project5.databinding.ReviewItemBinding\r\n\r\nclass ReviewAdapter : RecyclerView.Adapter<ReviewAdapter.ViewHolder>(){\r\n    //각 아이템에 보여질 데이터를 담고 있는것\r\n    var items = ArrayList<ReviewSaveData>()\r\n    var context: Context? = null\r\n\r\n    var listener: OnReviewItemClickListener? = null\r\n    //리싸이클러뷰가 아이템 개수가 몇 개인지 물어볼때\r\n    override fun getItemCount(): Int = items.size\r\n    //각 아이템의 모양이 처음 만들어 질때\r\n    override fun onCreateViewHolder(parent : ViewGroup, viewType:Int): ReviewAdapter.ViewHolder{\r\n        val binding = ReviewItemBinding.inflate(LayoutInflater.from(parent.context),parent, false)\r\n        return ViewHolder(binding)\r\n    }\r\n    //이미 만들어진 아이템의 모양에 데이터만 설정할 때\r\n    override fun onBindViewHolder(holder: ReviewAdapter.ViewHolder, position: Int){\r\n        val item = items[position]\r\n        holder.setItem(item)\r\n    }\r\n    //각 아이템의 모양을 재사용하기 위해 만들어진 것\r\n    inner class ViewHolder(val binding: ReviewItemBinding):RecyclerView.ViewHolder(binding.root){\r\n        //데이터 설정\r\n        //하나의 아이템을 위한 데이터가 전달되었을 때 화면에 어떻게 표시할 지 설정\r\n        fun setItem(item: ReviewSaveData){\r\n            //이미지 표시하기\r\n            item.saveImage?.apply{\r\n                val uri = Uri.parse(\"http://192.168.0.3:8001${this}\")\r\n                Glide.with(binding.reviewMemImageView).load(uri).into(binding.reviewMemImageView)\r\n            }\r\n\r\n            binding.reviewName.text = item.saveImage\r\n            binding.reviewTitle1.text = item.saveReviewTitle\r\n            binding.reviewContent1.text = item.saveReviewContent\r\n\r\n\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/lx/project5/ReviewAdapter.kt b/app/src/main/java/com/lx/project5/ReviewAdapter.kt
--- a/app/src/main/java/com/lx/project5/ReviewAdapter.kt	(revision 39fb8470da6618bb31223409483a83a12a8925e5)
+++ b/app/src/main/java/com/lx/project5/ReviewAdapter.kt	(date 1668685498522)
@@ -33,7 +33,7 @@
         fun setItem(item: ReviewSaveData){
             //이미지 표시하기
             item.saveImage?.apply{
-                val uri = Uri.parse("http://192.168.0.3:8001${this}")
+                val uri = Uri.parse("http://192.168.0.15:8001${this}")
                 Glide.with(binding.reviewMemImageView).load(uri).into(binding.reviewMemImageView)
             }
 
Index: app/src/main/java/com/lx/project5/MyPageFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.lx.project5\r\n\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport com.bumptech.glide.Glide\r\nimport com.lx.project5.databinding.FragmentFirstBinding\r\nimport com.lx.project5.databinding.FragmentMyPageBinding\r\n\r\nclass MyPageFragment : Fragment() {\r\n    var _binding: FragmentMyPageBinding? = null\r\n    val binding get() = _binding!!\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        _binding = FragmentMyPageBinding.inflate(inflater, container, false)\r\n        initView()\r\n\r\n\r\n\r\n\r\n\r\n        binding.updateButton.setOnClickListener {\r\n            val curActivity = activity as MainActivity\r\n            curActivity.onFragmentChanged(MainActivity.ScreenItem.ITEMupdate)\r\n        }\r\n\r\n        binding.myWriteButton.setOnClickListener {\r\n            (activity as MainActivity).onFragmentChanged(MainActivity.ScreenItem.ITEMwriteList)\r\n        }\r\n\r\n        binding.goDogList.setOnClickListener {\r\n            (activity as MainActivity).onFragmentChanged(MainActivity.ScreenItem.ITEMdogList)\r\n        }\r\n        return binding.root\r\n    }\r\n    fun initView(){\r\n        AppData.loginData?.apply{\r\n            this.memberImage?.let{\r\n                val uri = Uri.parse(\"http://192.168.0.3:8001${memberImage}\")\r\n                Glide.with(binding.imageView2).load(uri).into(binding.imageView2)\r\n            }\r\n            binding.memberName.text = AppData.loginData?.memberId\r\n            binding.address.text = AppData.loginData?.memberName\r\n            binding.textView9.text = AppData.loginData?.memberAddress\r\n\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/lx/project5/MyPageFragment.kt b/app/src/main/java/com/lx/project5/MyPageFragment.kt
--- a/app/src/main/java/com/lx/project5/MyPageFragment.kt	(revision 39fb8470da6618bb31223409483a83a12a8925e5)
+++ b/app/src/main/java/com/lx/project5/MyPageFragment.kt	(date 1668685498573)
@@ -39,7 +39,7 @@
     fun initView(){
         AppData.loginData?.apply{
             this.memberImage?.let{
-                val uri = Uri.parse("http://192.168.0.3:8001${memberImage}")
+                val uri = Uri.parse("http://192.168.0.15:8001${memberImage}")
                 Glide.with(binding.imageView2).load(uri).into(binding.imageView2)
             }
             binding.memberName.text = AppData.loginData?.memberId
Index: app/src/main/java/com/lx/project5/EditDogFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.lx.project5\r\n\r\nimport android.content.Intent\r\nimport android.graphics.Bitmap\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.provider.MediaStore\r\nimport android.text.Editable\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.bumptech.glide.Glide\r\nimport com.lx.api.BasicClient\r\nimport com.lx.data.DogListResponse\r\nimport com.lx.project5.databinding.FragmentEditDogBinding\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\nclass EditDogFragment : Fragment() {\r\n    var _binding: FragmentEditDogBinding? = null\r\n    val binding get() = _binding!!\r\n    var bitmap: Bitmap? = null\r\n\r\n    //사진찍기 런처\r\n    val captureLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) {\r\n        showToast(\"사진찍고 돌아옴\")\r\n\r\n        when(it.resultCode) {\r\n            AppCompatActivity.RESULT_OK -> {\r\n                bitmap = it.data?.extras?.get(\"data\") as Bitmap\r\n                binding.imageView30.setImageBitmap(bitmap)\r\n                val saveCapture = activity as MainActivity\r\n                saveCapture.saveFile(bitmap!!)\r\n\r\n\r\n            }\r\n            AppCompatActivity.RESULT_CANCELED -> {\r\n                showToast(\"취소함\")\r\n            }\r\n        }\r\n    }\r\n\r\n    //앨범에서 가져오기위한 런처\r\n    val albumLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) {\r\n        showToast(\"앨범에서 돌아옴\")\r\n\r\n        when(it.resultCode) {\r\n            AppCompatActivity.RESULT_OK -> {\r\n                it.data?.apply {\r\n                    val imageUri = this.data\r\n                    imageUri?.let {\r\n                        val cr = requireActivity().contentResolver\r\n                        bitmap = MediaStore.Images.Media.getBitmap(cr, it)\r\n                        binding.imageView30.setImageBitmap(bitmap)\r\n                        val saveCapture = activity as MainActivity\r\n                        saveCapture.saveFile(bitmap!!)\r\n                    }\r\n                }\r\n            }\r\n            AppCompatActivity.RESULT_CANCELED -> {\r\n                showToast(\"앨범 선택 취소\")\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        _binding = FragmentEditDogBinding.inflate(inflater, container, false)\r\n\r\n        initView()\r\n\r\n        binding.editButton.setOnClickListener {\r\n            editDog()\r\n        }\r\n        //앨범에서 가져오기 버튼 눌렀을 때\r\n        binding.photoButton2.setOnClickListener {\r\n            val albumIntent = Intent(Intent.ACTION_GET_CONTENT)\r\n            albumIntent.type = \"image/*\"\r\n            albumLauncher.launch(albumIntent)\r\n        }\r\n\r\n\r\n        return binding.root\r\n    }\r\n    fun editDog(){\r\n        val dogAge = binding.ageOutput2.getText().toString()\r\n        val dogCharacter = binding.characterInput2.getText().toString()\r\n        val dogEducation = binding.educationInput2.getText().toString()\r\n        val dogBreed = binding.typeOutput2.getText().toString()\r\n        val dogGender = binding.genderOutput2.getText().toString()\r\n        val dogImage = AppData.filepath\r\n        val dogName= binding.nameOutput2.getText().toString()\r\n        val dogNo = AppData.selectedItem?.dogNo.toString()\r\n        val memberNo= AppData.selectedItem?.memberNo.toString()\r\n\r\n\r\n\r\n\r\n        BasicClient.api.postDogUpdate(\r\n            requestCode = \"1001\",\r\n            dogAge = dogAge,\r\n            dogCharacter = dogCharacter,\r\n            dogEducation = dogEducation,\r\n            dogBreed = dogBreed,\r\n            dogGender = dogGender,\r\n            dogImage = dogImage!!,\r\n            dogName = dogName,\r\n            dogNo = dogNo,\r\n            memberNo = memberNo\r\n        ).enqueue(object : Callback<DogListResponse> {\r\n            override fun onResponse(call: Call<DogListResponse>, response: Response<DogListResponse>) {\r\n\r\n            }\r\n            override fun onFailure(call: Call<DogListResponse>, t: Throwable) {\r\n                (activity as MainActivity).filename = null\r\n                (activity as MainActivity).onFragmentChanged(MainActivity.ScreenItem.ITEMmyPage)\r\n            }\r\n        })\r\n    }\r\n    fun showToast(message: String) {\r\n        Toast.makeText(activity, message, Toast.LENGTH_LONG).show()\r\n    }\r\n    fun initView(){\r\n        AppData.selectedItem?.apply{\r\n            this.dogImage?.let{\r\n                val uri = Uri.parse(\"http://192.168.0.3:8001${this.dogImage}\")\r\n                Glide.with(binding.imageView30).load(uri).into(binding.imageView30)\r\n            }\r\n            binding.nameOutput2.text = Editable.Factory.getInstance().newEditable(\"${AppData.selectedItem?.dogName}\")\r\n            binding.ageOutput2.text = Editable.Factory.getInstance().newEditable(\"${AppData.selectedItem?.dogAge}\")\r\n            binding.genderOutput2.text = Editable.Factory.getInstance().newEditable(\"${AppData.selectedItem?.dogGender}\")\r\n            binding.typeOutput2.text = Editable.Factory.getInstance().newEditable(\"${AppData.selectedItem?.dogBreed}\")\r\n            binding.educationInput2.text = Editable.Factory.getInstance().newEditable(\"${AppData.selectedItem?.dogEducation}\")\r\n            binding.characterInput2.text = Editable.Factory.getInstance().newEditable(\"${AppData.selectedItem?.dogCharacter}\")\r\n\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/lx/project5/EditDogFragment.kt b/app/src/main/java/com/lx/project5/EditDogFragment.kt
--- a/app/src/main/java/com/lx/project5/EditDogFragment.kt	(revision 39fb8470da6618bb31223409483a83a12a8925e5)
+++ b/app/src/main/java/com/lx/project5/EditDogFragment.kt	(date 1668685498533)
@@ -127,7 +127,7 @@
     fun initView(){
         AppData.selectedItem?.apply{
             this.dogImage?.let{
-                val uri = Uri.parse("http://192.168.0.3:8001${this.dogImage}")
+                val uri = Uri.parse("http://192.168.0.15:8001${this.dogImage}")
                 Glide.with(binding.imageView30).load(uri).into(binding.imageView30)
             }
             binding.nameOutput2.text = Editable.Factory.getInstance().newEditable("${AppData.selectedItem?.dogName}")
Index: app/src/main/java/com/lx/project5/WriteAndListFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.lx.project5\r\n\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport com.bumptech.glide.Glide\r\nimport com.lx.api.BasicClient\r\nimport com.lx.data.AwrListResponse\r\nimport com.lx.data.DogListResponse\r\nimport com.lx.project5.databinding.FragmentThirdBinding\r\nimport com.lx.project5.databinding.FragmentWriteandlistBinding\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\nclass WriteAndListFragment : Fragment() {\r\n    var _binding: FragmentWriteandlistBinding? = null\r\n    val binding get() = _binding!!\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        _binding = FragmentWriteandlistBinding.inflate(inflater, container, false)\r\n\r\n        initView1()\r\n        initView2()\r\n\r\n        return binding.root\r\n    }\r\n\r\n\r\n    fun initView1(){\r\n        BasicClient.api.getDogInfo(\r\n            requestCode = \"1001\",\r\n            dogNo = AppData.selectedWriteItem?.dogNo.toString()\r\n        ).enqueue(object: Callback<DogListResponse> {\r\n            override fun onResponse(call: Call<DogListResponse>, response: Response<DogListResponse>) {\r\n\r\n                AppData.dogInfo = DogData()\r\n\r\n                AppData.dogInfo?.dogImage = response.body()?.data?.get(0)?.dogImage\r\n                AppData.dogInfo?.dogName = response.body()?.data?.get(0)?.dogName\r\n                AppData.dogInfo?.apply{\r\n                    this.dogImage?.let{\r\n                        val uri = Uri.parse(\"http://192.168.0.3:8001${dogImage}\")\r\n                        Glide.with(binding.awrdImage).load(uri).into(binding.awrdImage)\r\n                    }\r\n                    binding.awrdDog.text = AppData.dogInfo?.dogName\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n            override fun onFailure(call: Call<DogListResponse>, t: Throwable) {\r\n            }\r\n\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n    fun initView2(){\r\n        binding.awrdTitle.text = AppData.selectedWriteItem?.assignTitle\r\n        binding.awrdContent.text = AppData.selectedWriteItem?.assignContent\r\n\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/lx/project5/WriteAndListFragment.kt b/app/src/main/java/com/lx/project5/WriteAndListFragment.kt
--- a/app/src/main/java/com/lx/project5/WriteAndListFragment.kt	(revision 39fb8470da6618bb31223409483a83a12a8925e5)
+++ b/app/src/main/java/com/lx/project5/WriteAndListFragment.kt	(date 1668685498538)
@@ -43,7 +43,7 @@
                 AppData.dogInfo?.dogName = response.body()?.data?.get(0)?.dogName
                 AppData.dogInfo?.apply{
                     this.dogImage?.let{
-                        val uri = Uri.parse("http://192.168.0.3:8001${dogImage}")
+                        val uri = Uri.parse("http://192.168.0.15:8001${dogImage}")
                         Glide.with(binding.awrdImage).load(uri).into(binding.awrdImage)
                     }
                     binding.awrdDog.text = AppData.dogInfo?.dogName
Index: app/src/main/java/com/lx/project5/PetAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.lx.project5\r\n\r\nimport android.content.Context\r\nimport android.net.Uri\r\nimport android.view.LayoutInflater\r\nimport android.view.ViewGroup\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.bumptech.glide.Glide\r\nimport com.lx.project5.databinding.DogItemBinding\r\n\r\nclass PetAdapter : RecyclerView.Adapter<PetAdapter.ViewHolder>(){\r\n    //각 아이템에 보여질 데이터를 담고 있는것\r\n    var items = ArrayList<PetData>()\r\n    var context: Context? = null\r\n\r\n    var listener: OnPetItemClickListener? = null\r\n    //리싸이클러뷰가 아이템 개수가 몇 개인지 물어볼때\r\n    override fun getItemCount(): Int = items.size\r\n    //각 아이템의 모양이 처음 만들어 질때\r\n    override fun onCreateViewHolder(parent : ViewGroup, viewType:Int): PetAdapter.ViewHolder{\r\n        val binding = DogItemBinding.inflate(LayoutInflater.from(parent.context),parent, false)\r\n        return ViewHolder(binding)\r\n    }\r\n    //이미 만들어진 아이템의 모양에 데이터만 설정할 때\r\n    override fun onBindViewHolder(holder: PetAdapter.ViewHolder, position: Int){\r\n        val item = items[position]\r\n        holder.setItem(item)\r\n    }\r\n    //각 아이템의 모양을 재사용하기 위해 만들어진 것\r\n    inner class ViewHolder(val binding: DogItemBinding):RecyclerView.ViewHolder(binding.root){\r\n        //데이터 설정\r\n        //하나의 아이템을 위한 데이터가 전달되었을 때 화면에 어떻게 표시할 지 설정\r\n        fun setItem(item: PetData){\r\n            //이미지 표시하기\r\n            item.dogImage?.apply{\r\n                val uri = Uri.parse(\"http://192.168.0.3:8001${this}\")\r\n                Glide.with(binding.gridPictureView).load(uri).into(binding.gridPictureView)\r\n            }\r\n\r\n            //강아지 이름\r\n            binding.dogNameOutput.text = item.dogName\r\n            //강아지 나이\r\n            binding.dogAgeOutput.text = item.dogAge.toString()\r\n            //강아지 성별\r\n            binding.dogGenderOutput.text = item.dogGender\r\n            //견종\r\n            binding.dogTypeOutput.text = item.dogBreed\r\n\r\n        }\r\n        init {\r\n            binding.root.setOnClickListener{\r\n                listener?.onItemClick(this,binding.root,adapterPosition)\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/lx/project5/PetAdapter.kt b/app/src/main/java/com/lx/project5/PetAdapter.kt
--- a/app/src/main/java/com/lx/project5/PetAdapter.kt	(revision 39fb8470da6618bb31223409483a83a12a8925e5)
+++ b/app/src/main/java/com/lx/project5/PetAdapter.kt	(date 1668685498527)
@@ -33,7 +33,7 @@
         fun setItem(item: PetData){
             //이미지 표시하기
             item.dogImage?.apply{
-                val uri = Uri.parse("http://192.168.0.3:8001${this}")
+                val uri = Uri.parse("http://192.168.0.15:8001${this}")
                 Glide.with(binding.gridPictureView).load(uri).into(binding.gridPictureView)
             }
 
Index: app/src/main/java/com/lx/project5/PetInfoFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.lx.project5\r\n\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport com.bumptech.glide.Glide\r\nimport com.lx.project5.AppData.Companion.selectedItem\r\nimport com.lx.project5.databinding.FragmentMemberInfoUpdateBinding\r\nimport com.lx.project5.databinding.FragmentPetInfoBinding\r\n\r\nclass PetInfoFragment : Fragment() {\r\n    var _binding: FragmentPetInfoBinding? = null\r\n    val binding get() = _binding!!\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        _binding = FragmentPetInfoBinding.inflate(inflater, container, false)\r\n\r\n        initView()\r\n\r\n        binding.editInfoButton2.setOnClickListener {\r\n            (activity as MainActivity).onFragmentChanged(MainActivity.ScreenItem.ITEMeditDog)\r\n        }\r\n\r\n        binding.backButton3.setOnClickListener {\r\n            (activity as MainActivity).onFragmentChanged(MainActivity.ScreenItem.ITEMdogList)\r\n        }\r\n\r\n        return binding.root\r\n    }\r\n    fun initView(){\r\n        AppData.selectedItem?.apply{\r\n            this.dogImage .let{\r\n                val uri = Uri.parse(\"http://192.168.0.3:8001${dogImage}\")\r\n                Glide.with(binding.imageView4).load(uri).into(binding.imageView4)\r\n            }\r\n            binding.petName.text = \"${selectedItem?.dogName}\"\r\n            binding.petAge.text = \"${selectedItem?.dogAge}\"\r\n            binding.petGender.text = \"${selectedItem?.dogGender}\"\r\n            binding.petBreed?.text = \"${selectedItem?.dogBreed}\"\r\n            binding.petEducation.text = \"${selectedItem?.dogEducation}\"\r\n            binding.petCharacter.text = \"${selectedItem?.dogCharacter}\"\r\n\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/lx/project5/PetInfoFragment.kt b/app/src/main/java/com/lx/project5/PetInfoFragment.kt
--- a/app/src/main/java/com/lx/project5/PetInfoFragment.kt	(revision 39fb8470da6618bb31223409483a83a12a8925e5)
+++ b/app/src/main/java/com/lx/project5/PetInfoFragment.kt	(date 1668685498557)
@@ -33,7 +33,7 @@
     fun initView(){
         AppData.selectedItem?.apply{
             this.dogImage .let{
-                val uri = Uri.parse("http://192.168.0.3:8001${dogImage}")
+                val uri = Uri.parse("http://192.168.0.15:8001${dogImage}")
                 Glide.with(binding.imageView4).load(uri).into(binding.imageView4)
             }
             binding.petName.text = "${selectedItem?.dogName}"
