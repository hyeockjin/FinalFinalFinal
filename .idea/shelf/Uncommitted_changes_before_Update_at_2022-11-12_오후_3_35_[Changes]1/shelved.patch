Index: app/src/main/java/com/lx/project5/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.lx.project5\r\n\r\nimport android.Manifest\r\nimport android.app.AlertDialog\r\nimport android.content.Context\r\nimport android.content.DialogInterface\r\nimport android.graphics.Bitmap\r\nimport android.location.Location\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.os.Looper\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.Toast\r\nimport com.google.android.gms.location.*\r\nimport com.google.android.gms.maps.CameraUpdateFactory\r\nimport com.google.android.gms.maps.GoogleMap\r\nimport com.google.android.gms.maps.SupportMapFragment\r\nimport com.google.android.gms.maps.model.*\r\nimport com.lx.api.BasicClient\r\nimport com.lx.data.CareListResponse\r\nimport com.lx.data.FileUploadResponse\r\nimport com.lx.data.MemberListResponse\r\nimport com.lx.project5.databinding.ActivityMainBinding\r\nimport com.permissionx.guolindev.PermissionX\r\nimport okhttp3.MediaType.Companion.toMediaTypeOrNull\r\nimport okhttp3.MultipartBody\r\nimport okhttp3.RequestBody.Companion.asRequestBody\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\nimport java.io.File\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n    lateinit var binding: ActivityMainBinding\r\n\r\n    var locationClient: FusedLocationProviderClient? = null\r\n\r\n    lateinit var map: GoogleMap\r\n\r\n    var myMarker: Marker? = null\r\n\r\n    enum class ScreenItem {\r\n        ITEM1,\r\n        ITEM2,\r\n        ITEM3,\r\n        ITEMmyPage,\r\n        ITEMcareInfo,\r\n        ITEMaddDog,\r\n        ITEMassess,\r\n        ITEMcareMain,\r\n        ITEMcareTodolist,\r\n        ITEMcomplete,\r\n        ITEMeditDog,\r\n        ITEMjoin1,\r\n        ITEMjoin2,\r\n        ITEMlogin,\r\n        ITEMupdate,\r\n        ITEMpay,\r\n        ITEMreservation,\r\n        ITEMwrite,\r\n        ITEMwriteList,\r\n        ITEMend,\r\n        ITEMdogList\r\n\r\n    }\r\n\r\n    var petIndex: String? = null\r\n    val dateFormat1 = SimpleDateFormat(\"yyyyMMddHHmmss\")\r\n    var filename: String? = null\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityMainBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.cardView.setOnClickListener{\r\n            onFragmentChanged(ScreenItem.ITEMcareInfo)\r\n        }\r\n        //하단 탭의 버튼을 눌렀을때\r\n        binding.bottomNavigationView.setOnNavigationItemSelectedListener {\r\n            when(it.itemId) {\r\n                R.id.tab1 -> {\r\n                    onFragmentChanged(ScreenItem.ITEM1)\r\n                }\r\n                R.id.tab2 -> {\r\n                    onFragmentChanged(ScreenItem.ITEM3)\r\n                }\r\n                R.id.tab3 -> {\r\n                    onFragmentChanged(ScreenItem.ITEM2)\r\n                }\r\n                R.id.tab4 -> {\r\n                    if(AppData.loginData?.memberId == null){\r\n                        onFragmentChanged(ScreenItem.ITEMlogin)\r\n                    }else if (AppData.loginData?.memberId != null){\r\n                        onFragmentChanged(ScreenItem.ITEMmyPage)\r\n                    }\r\n\r\n                }\r\n            }\r\n            return@setOnNavigationItemSelectedListener true\r\n        }\r\n        //화면이 보일 때 첫 화면 보여주기\r\n       // onFragmentChanged(ScreenItem.ITEM1)\r\n\r\n        binding.cardView.visibility = View.GONE\r\n        // 위험권한 요청하기\r\n        PermissionX.init(this)\r\n            .permissions(\r\n                Manifest.permission.ACCESS_FINE_LOCATION,\r\n                Manifest.permission.ACCESS_COARSE_LOCATION\r\n            )\r\n            .request { allGranted, grantedList, deniedList ->\r\n                if (allGranted) {\r\n                    showToast(\"모든 권한 부여됨.\")\r\n                } else {\r\n                    showToast(\"거부된 권한 있음.\")\r\n                }\r\n            }\r\n\r\n        // 지도 초기화하기\r\n        val mapFragment = supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment\r\n        mapFragment.getMapAsync {\r\n            map = it\r\n\r\n            // 내 위치 요청하기\r\n            requestLocation()\r\n\r\n            // 마커 클릭 시 처리\r\n            map.setOnMarkerClickListener {\r\n                // showToast(\"마커 클릭됨 : ${it.tag}, ${it.title}\")\r\n\r\n                // 필요시 다른 화면으로 이동 (tag 정보를 이용해서 구분함)\r\n                binding.cardView.visibility = View.VISIBLE\r\n\r\n                true\r\n            }\r\n\r\n            // 지도 클릭 시 처리\r\n            map.setOnMapClickListener {\r\n                //showToast(\"지도 클릭됨 : ${it.latitude}, ${it.longitude}\")\r\n                //카드뷰 안보이게\r\n                binding.cardView.visibility = View.GONE\r\n            }\r\n\r\n            // 보고있는 지도 영역 구분\r\n            map.setOnCameraIdleListener {\r\n                val bounds = map.projection.visibleRegion.latLngBounds\r\n                //showToast(\"좌상단 : ${bounds.northeast}, ${bounds.southwest}\")\r\n\r\n                val zoomLevel = map.cameraPosition.zoom\r\n                println(\"zoomLevel : ${zoomLevel}\")\r\n            }\r\n\r\n            // 근처 지도 마커 활성화\r\n            //showNearLocationMarker(map)\r\n        }\r\n\r\n    }\r\n    fun onFragmentChanged(index:ScreenItem) {\r\n        when(index) {\r\n            ScreenItem.ITEM1 -> {\r\n                supportFragmentManager.beginTransaction().replace(R.id.container, FirstFragment()).commit()\r\n            }\r\n            ScreenItem.ITEM2 -> {\r\n                supportFragmentManager.beginTransaction().replace(R.id.container, SecondFragment()).commit()\r\n            }\r\n            ScreenItem.ITEM3 -> {\r\n                supportFragmentManager.beginTransaction().replace(R.id.container, CareMainFragment()).commit()\r\n            }\r\n            ScreenItem.ITEMmyPage -> {\r\n                supportFragmentManager.beginTransaction().replace(R.id.container, MyPageFragment()).commit()\r\n            }\r\n            ScreenItem.ITEMcareInfo -> {\r\n                supportFragmentManager.beginTransaction().replace(R.id.container, CareInfoFragment()).commit()\r\n            }\r\n            ScreenItem.ITEMaddDog -> {\r\n                supportFragmentManager.beginTransaction().replace(R.id.container, AddDogFragment()).commit()\r\n            }\r\n            ScreenItem.ITEMassess -> {\r\n                supportFragmentManager.beginTransaction().replace(R.id.container, AssessFragment()).commit()\r\n            }\r\n            ScreenItem.ITEMcareMain -> {\r\n                supportFragmentManager.beginTransaction().replace(R.id.container, CareMainFragment()).commit()\r\n            }\r\n            ScreenItem.ITEMcareTodolist -> {\r\n                supportFragmentManager.beginTransaction().replace(R.id.container, CareTodolistFragment()).commit()\r\n            }\r\n            ScreenItem.ITEMcomplete -> {\r\n                supportFragmentManager.beginTransaction().replace(R.id.container, CompleteFragment()).commit()\r\n            }\r\n            ScreenItem.ITEMeditDog -> {\r\n                supportFragmentManager.beginTransaction().replace(R.id.container, EditDogFragment()).commit()\r\n            }\r\n            ScreenItem.ITEMjoin1 -> {\r\n                supportFragmentManager.beginTransaction().replace(R.id.container, Join1Fragment()).commit()\r\n            }\r\n            ScreenItem.ITEMjoin2 -> {\r\n                supportFragmentManager.beginTransaction().replace(R.id.container, Join2Fragment()).commit()\r\n            }\r\n            ScreenItem.ITEMlogin -> {\r\n                supportFragmentManager.beginTransaction().replace(R.id.container, LoginFragment()).commit()\r\n            }\r\n\r\n            ScreenItem.ITEMupdate -> {\r\n                supportFragmentManager.beginTransaction().replace(R.id.container, MemberInfoUpdateFragment()).commit()\r\n            }\r\n\r\n            ScreenItem.ITEMpay -> {\r\n                supportFragmentManager.beginTransaction().replace(R.id.container, LoginFragment()).commit()\r\n            }\r\n            ScreenItem.ITEMreservation -> {\r\n                supportFragmentManager.beginTransaction().replace(R.id.container, ReservationFragment()).commit()\r\n            }\r\n            ScreenItem.ITEMwrite -> {\r\n                supportFragmentManager.beginTransaction().replace(R.id.container, WriteFragment()).commit()\r\n            }\r\n            ScreenItem.ITEMwriteList -> {\r\n                supportFragmentManager.beginTransaction().replace(R.id.container, WriteListFragment()).commit()\r\n            }\r\n            ScreenItem.ITEMend -> {\r\n                supportFragmentManager.beginTransaction().replace(R.id.container, EndFragment()).commit()\r\n            }\r\n            ScreenItem.ITEMdogList -> {\r\n                supportFragmentManager.beginTransaction().replace(R.id.container, DogListFragment()).commit()\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n    fun requestLocation() {\r\n\r\n        try {\r\n            // 가장 최근에 확인된 위치 알려주기\r\n            locationClient?.lastLocation?.addOnSuccessListener {\r\n\r\n            }\r\n\r\n\r\n            // 위치클라이언트 만들기\r\n            locationClient = LocationServices.getFusedLocationProviderClient(this)\r\n\r\n            // 내위치를 요청할 때 필요한 설정값\r\n            val locationRequest = LocationRequest.create()\r\n            locationRequest.run {\r\n                priority = LocationRequest.PRIORITY_HIGH_ACCURACY\r\n                interval = 30 * 1000\r\n            }\r\n\r\n            // 내위치를 받았을 때 자동으로 호출되는 함수\r\n            val locationCallback = object : LocationCallback() {\r\n                override fun onLocationResult(result: LocationResult) {\r\n                    super.onLocationResult(result)\r\n\r\n                    for ((index, location) in result.locations.withIndex()) {\r\n                        Log.v(\"lastkingdom\",\"${location.latitude},${location.longitude}\")\r\n                        showCurrentLocation(location)\r\n                    }\r\n                }\r\n            }\r\n\r\n            // 내 위치 요청\r\n            locationClient?.requestLocationUpdates(locationRequest, locationCallback, Looper.myLooper())\r\n\r\n        } catch(e:SecurityException) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    // 내 위치의 지도 보여주기\r\n    fun showCurrentLocation(location: Location) {\r\n        val curPoint = LatLng(location.latitude, location.longitude)\r\n        map.moveCamera(CameraUpdateFactory.newLatLngZoom(curPoint, 17.0f))\r\n\r\n        showMarker(curPoint)\r\n\r\n    }\r\n\r\n    // 근처 마커 표시\r\n    fun showNearLocationMarker(map: GoogleMap) {\r\n        BasicClient.api.getCareListTest(\r\n            requestCode = \"1001\"\r\n        ).enqueue(object : Callback<CareListResponse> {\r\n            override fun onResponse(call: Call<CareListResponse>, response: Response<CareListResponse>) {\r\n                Log.v(\"lastkingdom\",\"근처 마커 활성화 요청 성공\")\r\n                //for (idx in 0..2) {\r\n                    Log.v(\"lastkingdom\",\"근처 마커 for문 진입\")\r\n                    var latitude = response.body()?.data?.get(0)?.careX\r\n                    var longitude = response.body()?.data?.get(0)?.careY\r\n\r\n                    Log.v(\"lastkingdom\",\"2\")\r\n                    // 1. 마커 옵션 설정 (만드는 과정)\r\n                    var makerOptions = MarkerOptions()\r\n                    makerOptions // LatLng에 대한 어레이를 만들어서 이용할 수도 있다.\r\n                        .position(LatLng(latitude!!, longitude!!))\r\n                        .title(\"마커\"+0) // 타이틀.\r\n\r\n                    // 2. 마커 생성 (마커를 나타냄)\r\n                    map.addMarker(makerOptions)\r\n                //}\r\n            }\r\n            override fun onFailure(call: Call<CareListResponse>, t: Throwable) {\r\n                Log.v(\"lastkingdom\",\"근처 마커 활성화 요청 실패\")\r\n            }\r\n        })\r\n    }\r\n\r\n    fun showMarker(curPoint: LatLng) {\r\n        myMarker?.remove()\r\n\r\n        MarkerOptions().also {\r\n            it.position(curPoint)\r\n            it.title(\"내위치\")\r\n            it.icon(BitmapDescriptorFactory.fromResource(R.drawable.dogmarker))\r\n\r\n\r\n            myMarker = map.addMarker(it)\r\n            myMarker?.tag = \"1001\"\r\n        }\r\n\r\n    }\r\n\r\n    //게시글에서 사진 찍은거 저장하기\r\n    fun saveFile(bitmap: Bitmap) {\r\n        filename = dateFormat1.format(Date()) + \".jpg\"\r\n        bitmap?.apply {\r\n            openFileOutput(filename, Context.MODE_PRIVATE).use {\r\n                this.compress(Bitmap.CompressFormat.JPEG, 100, it)\r\n                it.close()\r\n\r\n                showToast(\"이미지를 파일로 저장함 : ${filename}\")\r\n\r\n                uploadFile(filename!!)\r\n            }\r\n        }\r\n    }\r\n    fun uploadFile(filename:String){\r\n        // 저장한 파일에 대한 정보를 filePart로 만들기\r\n        val file = File(\"${filesDir}/${filename}\")\r\n        val filePart = MultipartBody.Part.createFormData(\r\n            \"photo\",\r\n            filename,\r\n            file.asRequestBody(\"images/jpg\".toMediaTypeOrNull())\r\n        )\r\n        // 추가 파라미터가 있는 경우\r\n        val params = hashMapOf<String, String>()\r\n\r\n        //api 에 있는 리스트 조회\r\n        BasicClient.api.uploadFile(\r\n            file = filePart,\r\n            params = params\r\n        ).enqueue(object : Callback<FileUploadResponse> {\r\n            override fun onResponse(call: Call<FileUploadResponse>, response: Response<FileUploadResponse>) {\r\n                response.body()?.output?.filename?.apply{\r\n                    AppData.filepath = this\r\n                }\r\n            }\r\n            override fun onFailure(call: Call<FileUploadResponse>, t: Throwable) {\r\n            }\r\n        })\r\n    }\r\n\r\n    fun showToast(message:String) {\r\n        Toast.makeText(this, message, Toast.LENGTH_LONG).show()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/lx/project5/MainActivity.kt b/app/src/main/java/com/lx/project5/MainActivity.kt
--- a/app/src/main/java/com/lx/project5/MainActivity.kt	
+++ b/app/src/main/java/com/lx/project5/MainActivity.kt	
@@ -19,6 +19,7 @@
 import com.google.android.gms.maps.model.*
 import com.lx.api.BasicClient
 import com.lx.data.CareListResponse
+import com.lx.data.CareListTestResponse
 import com.lx.data.FileUploadResponse
 import com.lx.data.MemberListResponse
 import com.lx.project5.databinding.ActivityMainBinding
@@ -26,6 +27,7 @@
 import okhttp3.MediaType.Companion.toMediaTypeOrNull
 import okhttp3.MultipartBody
 import okhttp3.RequestBody.Companion.asRequestBody
+import org.json.JSONArray
 import retrofit2.Call
 import retrofit2.Callback
 import retrofit2.Response
@@ -154,8 +156,8 @@
                 println("zoomLevel : ${zoomLevel}")
             }
 
-            // 근처 지도 마커 활성화
-            //showNearLocationMarker(map)
+            //근처 지도 마커 활성화
+            showNearLocationMarker(map)
         }
 
     }
@@ -282,13 +284,17 @@
     fun showNearLocationMarker(map: GoogleMap) {
         BasicClient.api.getCareListTest(
             requestCode = "1001"
-        ).enqueue(object : Callback<CareListResponse> {
-            override fun onResponse(call: Call<CareListResponse>, response: Response<CareListResponse>) {
+        ).enqueue(object : Callback<CareListTestResponse> {
+            override fun onResponse(call: Call<CareListTestResponse>, response: Response<CareListTestResponse>) {
                 Log.v("lastkingdom","근처 마커 활성화 요청 성공")
-                //for (idx in 0..2) {
+                val jsonArray = JSONArray(response.body()?.data)
+                for (i in 0 until jsonArray.length()) {
                     Log.v("lastkingdom","근처 마커 for문 진입")
-                    var latitude = response.body()?.data?.get(0)?.careX
-                    var longitude = response.body()?.data?.get(0)?.careY
+                    var latitude = response.body()?.data?.get(i)?.careX
+                    var longitude = response.body()?.data?.get(i)?.careY
+
+                    Log.v("lastkingdom","마커 위도 ${latitude.toString()}")
+                    Log.v("lastkingdom","마커 위도 ${longitude.toString()}")
 
                     Log.v("lastkingdom","2")
                     // 1. 마커 옵션 설정 (만드는 과정)
@@ -299,9 +305,9 @@
 
                     // 2. 마커 생성 (마커를 나타냄)
                     map.addMarker(makerOptions)
-                //}
+                }
             }
-            override fun onFailure(call: Call<CareListResponse>, t: Throwable) {
+            override fun onFailure(call: Call<CareListTestResponse>, t: Throwable) {
                 Log.v("lastkingdom","근처 마커 활성화 요청 실패")
             }
         })
